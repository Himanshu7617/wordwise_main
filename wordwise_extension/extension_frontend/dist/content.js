/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/*!************************!*\
  !*** ./src/content.ts ***!
  \************************/

//get all the words that are needed to be changed
// alert("from content script");
const allWords = [];
chrome.storage.local.get(['wordwiseAllWordsList'], (res) => {
    const tempList = res.wordwiseAllWordsList || [];
    if (tempList.length > 0) {
        tempList.forEach((item) => {
            allWords.push(item);
        });
    }
});
// process nodes and change the word
function handleProcessNodeEvent(node) {
    if (node.childNodes.length > 0) {
        Array.from(node.childNodes).forEach(handleProcessNodeEvent);
    }
    if (node instanceof HTMLElement) {
        handleChangeWordEvent(node);
    }
}
function handleChangeWordEvent(node) {
    if (node.nodeType === Node.TEXT_NODE) {
        let text = node.textContent || "";
        allWords.forEach((item) => {
            if (text.includes(item.word)) {
                text = text.replaceAll(item.word, item.definition);
            }
        });
        node.textContent = text;
    }
    else if (node.nodeType === Node.ELEMENT_NODE) {
        node.childNodes.forEach((child) => handleChangeWordEvent(child));
    }
}
//observing changes in the dom
const callback = (mutationList, obeserver) => {
    mutationList.forEach((mutation) => {
        if (mutation.addedNodes.length > 0) {
            mutation.addedNodes.forEach((node) => {
                if (node instanceof HTMLElement) {
                    handleProcessNodeEvent(node);
                }
            });
        }
        else {
            if (mutation.target instanceof HTMLElement) {
                handleProcessNodeEvent(mutation.target);
            }
        }
    });
};
const observer = new MutationObserver(callback);
const config = {
    attributes: true,
    childList: true,
    subtree: true,
};
// chrome.storage.sync.get('wordwiseUserEmail', (email) => { 
//   if(email.length > 0){ 
//     observer.observe(document, config);
//   }
// })
observer.observe(document, config);

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0FBQztBQUNoRCxNQUFNLE1BQU0sR0FBRztJQUNiLFVBQVUsRUFBRSxJQUFJO0lBQ2hCLFNBQVMsRUFBRSxJQUFJO0lBQ2YsT0FBTyxFQUFFLElBQUk7Q0FDZCxDQUFDO0FBR0YsNkRBQTZEO0FBQzdELDJCQUEyQjtBQUMzQiwwQ0FBMEM7QUFDMUMsTUFBTTtBQUNOLEtBQUs7QUFFTCxRQUFRLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dvcmR3aXNlX2V4dGVuc2lvbi8uL3NyYy9jb250ZW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vZ2V0IGFsbCB0aGUgd29yZHMgdGhhdCBhcmUgbmVlZGVkIHRvIGJlIGNoYW5nZWRcclxuXHJcbnR5cGUgbmV3V29yZCA9IHsgXHJcbiAgd29yZDogc3RyaW5nLCBcclxuICBkZWZpbml0aW9uIDogc3RyaW5nLFxyXG59XHJcblxyXG4vLyBhbGVydChcImZyb20gY29udGVudCBzY3JpcHRcIik7XHJcbmNvbnN0IGFsbFdvcmRzIDogbmV3V29yZFtdID0gW107XHJcbmNocm9tZS5zdG9yYWdlLmxvY2FsLmdldChbJ3dvcmR3aXNlQWxsV29yZHNMaXN0J10sIChyZXMpID0+IHsgXHJcbiAgY29uc3QgdGVtcExpc3QgPSByZXMud29yZHdpc2VBbGxXb3Jkc0xpc3QgfHwgW107XHJcblxyXG4gIGlmKHRlbXBMaXN0Lmxlbmd0aCA+IDApIHsgXHJcbiAgICB0ZW1wTGlzdC5mb3JFYWNoKChpdGVtIDogbmV3V29yZCkgPT4geyBcclxuICAgICAgYWxsV29yZHMucHVzaChpdGVtKVxyXG4gICAgfSlcclxuICB9XHJcbiAgXHJcbn0pXHJcblxyXG5cclxuLy8gcHJvY2VzcyBub2RlcyBhbmQgY2hhbmdlIHRoZSB3b3JkXHJcbmZ1bmN0aW9uIGhhbmRsZVByb2Nlc3NOb2RlRXZlbnQobm9kZTogSFRNTEVsZW1lbnQgfCBDaGlsZE5vZGUpIHtcclxuICBpZiAobm9kZS5jaGlsZE5vZGVzLmxlbmd0aCA+IDApIHtcclxuICAgIEFycmF5LmZyb20obm9kZS5jaGlsZE5vZGVzKS5mb3JFYWNoKGhhbmRsZVByb2Nlc3NOb2RlRXZlbnQpO1xyXG4gIH1cclxuXHJcbiAgaWYgKG5vZGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xyXG4gICAgaGFuZGxlQ2hhbmdlV29yZEV2ZW50KG5vZGUpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlQ2hhbmdlV29yZEV2ZW50KG5vZGU6IE5vZGUpIHtcclxuICBcclxuICAgIFxyXG5cclxuICAgIGlmIChub2RlLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSkge1xyXG4gICAgICBsZXQgdGV4dCA9IG5vZGUudGV4dENvbnRlbnQgfHwgXCJcIjtcclxuICAgICAgYWxsV29yZHMuZm9yRWFjaCgoaXRlbSA6IG5ld1dvcmQpID0+IHtcclxuICAgICAgICBpZiAodGV4dC5pbmNsdWRlcyhpdGVtLndvcmQpKSB7XHJcbiAgICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlQWxsKGl0ZW0ud29yZCwgaXRlbS5kZWZpbml0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBub2RlLnRleHRDb250ZW50ID0gdGV4dDtcclxuICAgIH0gZWxzZSBpZiAobm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUpIHtcclxuICAgICAgbm9kZS5jaGlsZE5vZGVzLmZvckVhY2goKGNoaWxkKSA9PiBoYW5kbGVDaGFuZ2VXb3JkRXZlbnQoY2hpbGQpKTtcclxuICAgIH1cclxuICAgXHJcbiAgXHJcbn1cclxuXHJcbi8vb2JzZXJ2aW5nIGNoYW5nZXMgaW4gdGhlIGRvbVxyXG5cclxuY29uc3QgY2FsbGJhY2sgPSAoXHJcbiAgbXV0YXRpb25MaXN0OiBNdXRhdGlvblJlY29yZFtdLFxyXG4gIG9iZXNlcnZlcjogTXV0YXRpb25PYnNlcnZlclxyXG4pOiB2b2lkID0+IHtcclxuICBtdXRhdGlvbkxpc3QuZm9yRWFjaCgobXV0YXRpb24pID0+IHtcclxuICAgIGlmIChtdXRhdGlvbi5hZGRlZE5vZGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgbXV0YXRpb24uYWRkZWROb2Rlcy5mb3JFYWNoKChub2RlKSA9PiB7XHJcbiAgICAgICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xyXG4gICAgICAgICAgaGFuZGxlUHJvY2Vzc05vZGVFdmVudChub2RlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKG11dGF0aW9uLnRhcmdldCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XHJcbiAgICAgICAgaGFuZGxlUHJvY2Vzc05vZGVFdmVudChtdXRhdGlvbi50YXJnZXQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSk7XHJcbn07XHJcblxyXG5jb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGNhbGxiYWNrKTtcclxuY29uc3QgY29uZmlnID0ge1xyXG4gIGF0dHJpYnV0ZXM6IHRydWUsXHJcbiAgY2hpbGRMaXN0OiB0cnVlLFxyXG4gIHN1YnRyZWU6IHRydWUsXHJcbn07XHJcblxyXG5cclxuLy8gY2hyb21lLnN0b3JhZ2Uuc3luYy5nZXQoJ3dvcmR3aXNlVXNlckVtYWlsJywgKGVtYWlsKSA9PiB7IFxyXG4vLyAgIGlmKGVtYWlsLmxlbmd0aCA+IDApeyBcclxuLy8gICAgIG9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQsIGNvbmZpZyk7XHJcbi8vICAgfVxyXG4vLyB9KVxyXG5cclxub2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudCwgY29uZmlnKTtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9